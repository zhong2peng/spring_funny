<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Default Maven PMD Plugin Ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

    <description>
        The default ruleset used by the Maven PMD Plugin, when no other ruleset is specified.
        It contains the rules of the old (pre PMD 6.0.0) rulesets java-basic, java-empty, java-imports,
        java-unnecessary, java-unusedcode.

        This ruleset might be used as a starting point for an own customized ruleset [0].

        [0] https://pmd.github.io/latest/pmd_userdocs_understanding_rulesets.html
    </description>

    <!--<rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>-->
    <!--<rule ref="category/java/bestpractices.xml/CheckResultSet"/>-->
    <!--<rule ref="category/java/bestpractices.xml/UnusedImports"/>-->
    <!--<rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>-->
    <!--<rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>-->
    <!--<rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>-->
    <!--<rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>-->

    <!--<rule ref="category/java/codestyle.xml/DontImportJavaLang"/>-->
    <!--<rule ref="category/java/codestyle.xml/DuplicateImports"/>-->
    <!--<rule ref="category/java/codestyle.xml/ExtendsObject"/>-->
    <!--<rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>-->
    <!--<rule ref="category/java/codestyle.xml/TooManyStaticImports"/>-->
    <!--<rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>-->
    <!--<rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>-->
    <!--<rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>-->
    <!--<rule ref="category/java/codestyle.xml/UselessParentheses"/>-->
    <!--<rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>-->

    <!--<rule ref="category/java/design.xml/CollapsibleIfStatements"/>-->
    <!--<rule ref="category/java/design.xml/SimplifiedTernary"/>-->
    <!--<rule ref="category/java/design.xml/UselessOverridingMethod"/>-->

    <!--<rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>-->
    <!--<rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>-->
    <!--<rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>-->
    <!--<rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>-->
    <!--<rule ref="category/java/errorprone.xml/BrokenNullCheck"/>-->
    <!--<rule ref="category/java/errorprone.xml/CheckSkipResult"/>-->
    <!--<rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>-->
    <!--<rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyCatchBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyIfStmt"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyInitializer"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyTryBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>-->
    <!--<rule ref="category/java/errorprone.xml/ImportFromSamePackage"/>-->
    <!--<rule ref="category/java/errorprone.xml/JumbledIncrementer"/>-->
    <!--<rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>-->
    <!--<rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>-->
    <!--<rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>-->
    <!--<rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>-->
    <!--<rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>-->
    <!--<rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>-->
    <!--<rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>-->

    <!--<rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>-->
    <!--<rule ref="category/java/multithreading.xml/DontCallThreadRun"/>-->
    <!--<rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>-->

    <!--<rule ref="category/java/performance.xml/BigIntegerInstantiation"/>-->
    <!--<rule ref="category/java/performance.xml/BooleanInstantiation"/>-->


    <rule ref="rulesets/java/imports.xml/UnusedImports"/>
    <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
    <rule ref="rulesets/java/imports.xml/DuplicateImports"/>
    <rule ref="rulesets/java/imports.xml/TooManyStaticImports"/>
    <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>
    <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>

    <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>

    <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
    <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
    <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
    <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="rulesets/java/basic.xml/SimplifiedTernary"/>
    <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
    <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
    <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
    <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
    <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
    <rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
    <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
    <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
    <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
    <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
    <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
    <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
    <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
    <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/>
    <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
    <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
    <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
    <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>

    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
    <rule ref="rulesets/java/unnecessary.xml/UselessParentheses"/>
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
    <rule ref="rulesets/java/unnecessary.xml/UselessQualifiedThis"/>
    <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
    <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
    <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>

    <rule ref="rulesets/vm/basic.xml/CollapsibleIfStatements"/>

    <rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
    <rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
    <rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
    <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
    <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>


    <!-- 阿里的PMD -->
    <!--暂时先注释掉javadoc相关检测 -->
    <!--<rule ref="rulesets/java/ali-comment.xml/CommentsMustBeJavadocFormatRule"/>-->
    <!--<rule ref="rulesets/java/ali-comment.xml/AbstractMethodOrInterfaceMethodMustUseJavadocRule"/>-->
    <rule ref="rulesets/java/ali-comment.xml/ClassMustHaveAuthorRule"/>
    <rule ref="rulesets/java/ali-comment.xml/EnumConstantsMustHaveCommentRule"/>
    <rule ref="rulesets/java/ali-comment.xml/AvoidCommentBehindStatementRule"/>
    <rule ref="rulesets/java/ali-comment.xml/RemoveCommentedCodeRule"/>

    <rule ref="rulesets/java/ali-concurrent.xml/ThreadPoolCreationRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/AvoidUseTimerRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/AvoidManuallyCreateThreadRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/ThreadShouldSetNameRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/AvoidCallStaticSimpleDateFormatRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/ThreadLocalShouldRemoveRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/AvoidConcurrentCompetitionRandomRule"/>
    <rule ref="rulesets/java/ali-concurrent.xml/CountDownShouldInFinallyRule"/>

    <rule ref="rulesets/java/ali-constant.xml/UpperEllRule"/>
    <rule ref="rulesets/java/ali-constant.xml/UndefineMagicConstantRule"/>

    <rule ref="rulesets/java/ali-exception.xml/MethodReturnWrapperTypeRule"/>
    <rule ref="rulesets/java/ali-exception.xml/AvoidReturnInFinallyRule"/>
    <rule ref="rulesets/java/ali-exception.xml/TransactionMustHaveRollbackRule"/>

    <rule ref="rulesets/java/ali-flowcontrol.xml/SwitchStatementRule"/>
    <rule ref="rulesets/java/ali-flowcontrol.xml/NeedBraceRule"/>
    <rule ref="rulesets/java/ali-flowcontrol.xml/AvoidComplexConditionRule"/>
    <rule ref="rulesets/java/ali-flowcontrol.xml/AvoidNegationOperatorRule"/>

    <rule ref="rulesets/java/ali-naming.xml/ClassNamingShouldBeCamelRule"/>
    <rule ref="rulesets/java/ali-naming.xml/AbstractClassShouldStartWithAbstractNamingRule"/>
    <rule ref="rulesets/java/ali-naming.xml/ExceptionClassShouldEndWithExceptionRule"/>
    <rule ref="rulesets/java/ali-naming.xml/TestClassShouldEndWithTestNamingRule"/>
    <rule ref="rulesets/java/ali-naming.xml/LowerCamelCaseVariableNamingRule"/>
    <rule ref="rulesets/java/ali-naming.xml/AvoidStartWithDollarAndUnderLineNamingRule"/>
    <rule ref="rulesets/java/ali-naming.xml/ConstantFieldShouldBeUpperCaseRule"/>
    <rule ref="rulesets/java/ali-naming.xml/ServiceOrDaoClassShouldEndWithImplRule"/>
    <rule ref="rulesets/java/ali-naming.xml/PackageNamingRule"/>
    <rule ref="rulesets/java/ali-naming.xml/BooleanPropertyShouldNotStartWithIsRule"/>
    <rule ref="rulesets/java/ali-naming.xml/ArrayNamingShouldHaveBracketRule"/>

    <rule ref="rulesets/java/ali-oop.xml/EqualsAvoidNullRule"/>
    <rule ref="rulesets/java/ali-oop.xml/WrapperTypeEqualityRule"/>
    <rule ref="rulesets/java/ali-oop.xml/PojoMustUsePrimitiveFieldRule"/>
    <rule ref="rulesets/java/ali-oop.xml/PojoNoDefaultValueRule"/>
    <rule ref="rulesets/java/ali-oop.xml/PojoMustOverrideToStringRule"/>
    <rule ref="rulesets/java/ali-oop.xml/StringConcatRule"/>

    <rule ref="rulesets/java/ali-orm.xml/IbatisMethodQueryForListRule"/>

    <rule ref="rulesets/java/ali-other.xml/AvoidPatternCompileInMethodRule"/>
    <rule ref="rulesets/java/ali-other.xml/AvoidApacheBeanUtilsCopyRule"/>
    <rule ref="rulesets/java/ali-other.xml/AvoidNewDateGetTimeRule"/>
    <rule ref="rulesets/java/ali-other.xml/AvoidMissUseOfMathRandomRule"/>
    <rule ref="rulesets/java/ali-other.xml/MethodTooLongRule"/>
    <rule ref="rulesets/java/ali-other.xml/UseRightCaseForDateFormatRule"/>

    <rule ref="rulesets/java/ali-set.xml/ClassCastExceptionWithToArrayRule"/>
    <rule ref="rulesets/java/ali-set.xml/UnsupportedExceptionWithModifyAsListRule"/>
    <rule ref="rulesets/java/ali-set.xml/ClassCastExceptionWithSubListToArrayListRule"/>
    <rule ref="rulesets/java/ali-set.xml/ConcurrentExceptionWithModifyOriginSubListRule"/>
    <rule ref="rulesets/java/ali-set.xml/DontModifyInForeachCircleRule"/>
    <rule ref="rulesets/java/ali-set.xml/CollectionInitShouldAssignCapacityRule"/>

    <rule ref="rulesets/vm/ali-other.xml/UseQuietReferenceNotationRule"/>

</ruleset>